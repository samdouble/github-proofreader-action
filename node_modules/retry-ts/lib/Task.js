"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.retrying = exports.applyAndDelay = void 0;
/**
 * @since 0.1.0
 */
var T = __importStar(require("fp-ts/lib/Task"));
var O = __importStar(require("fp-ts/lib/Option"));
var pipeable_1 = require("fp-ts/lib/pipeable");
var _1 = require(".");
/**
 * Apply policy and delay by its amount if it results in a retry.
 * Returns updated status.
 *
 * @since 0.1.0
 */
function applyAndDelay(policy, status) {
    var newStatus = _1.applyPolicy(policy, status);
    return pipeable_1.pipe(newStatus.previousDelay, O.fold(function () { return T.task.of(newStatus); }, function (millis) { return T.delay(millis)(T.task.of(newStatus)); }));
}
exports.applyAndDelay = applyAndDelay;
/**
 * Retry combinator for actions that don't raise exceptions, but
 * signal in their type the outcome has failed. Examples are the
 * `Option`, `Either` and `EitherT` monads.
 *
 * @since 0.1.0
 */
function retrying(policy, action, check) {
    var go = function (status) {
        return pipeable_1.pipe(status, action, T.chain(function (a) {
            if (check(a)) {
                return pipeable_1.pipe(applyAndDelay(policy, status), T.chain(function (status) {
                    return pipeable_1.pipe(status.previousDelay, O.fold(function () { return T.task.of(a); }, function () { return go(status); }));
                }));
            }
            else {
                return T.task.of(a);
            }
        }));
    };
    return go(_1.defaultRetryStatus);
}
exports.retrying = retrying;
