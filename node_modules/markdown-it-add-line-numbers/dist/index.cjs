"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var index_exports = {};
__export(index_exports, {
  addLineNumbersPlugin: () => addLineNumbersPlugin
});
module.exports = __toCommonJS(index_exports);
var import_markdown_it = __toESM(require("markdown-it"), 1);
var import_markdown_it_image_figures = __toESM(require("markdown-it-image-figures"), 1);
var import_node_html_parser = require("node-html-parser");
var parseHtmlBlockPlugin = (md, level = 0) => {
  function parseHtmlBlock(tokens, idx, options, env, slf) {
    const parser = build_parser(level + 1);
    const x = (0, import_node_html_parser.parse)(parser.render("\n" + tokens[idx].content.replace(/\n/g, "\n\n") + "\n"));
    return parser.render("\n" + tokens[idx].content.replace(/\n/g, "\n\n") + "\n");
  }
  md.renderer.rules.html_block = (tokens, idx, options, env, slf) => {
    return parseHtmlBlock(tokens, idx, options, env, slf);
  };
  md.renderer.rules.html_inline = (tokens, idx, options, env, slf) => {
    return parseHtmlBlock(tokens, idx, options, env, slf);
  };
};
var addLineNumbers = (md, level = 0) => {
  function _addLineNumbers(tokens, idx, options, env, slf) {
    if (tokens[idx].map) {
      const line = level === 0 ? tokens[idx].map[0] : (tokens[idx].map[0] - 1) / 2 + 3;
      tokens[idx].attrSet("data-source-line", String(line));
    }
    return slf.renderToken(tokens, idx, options);
  }
  md.renderer.rules.blockquote_open = _addLineNumbers;
  md.renderer.rules.bullet_list_open = _addLineNumbers;
  md.renderer.rules.heading_open = _addLineNumbers;
  md.renderer.rules.hr = _addLineNumbers;
  md.renderer.rules.link_open = _addLineNumbers;
  md.renderer.rules.list_item_open = _addLineNumbers;
  md.renderer.rules.ordered_list_open = _addLineNumbers;
  md.renderer.rules.paragraph_open = _addLineNumbers;
  md.renderer.rules.table_open = _addLineNumbers;
  md.renderer.rules.td_open = _addLineNumbers;
  md.renderer.rules.th_open = _addLineNumbers;
  md.renderer.rules.tr_open = _addLineNumbers;
};
var build_parser = (level = 0) => {
  const md = (0, import_markdown_it.default)({
    html: true,
    linkify: true,
    typographer: true,
    xhtmlOut: true
  });
  md.use(import_markdown_it_image_figures.default);
  md.use((md2) => addLineNumbers(md2, level));
  return md;
};
var addLineNumbersPlugin = (md) => {
  md.use(addLineNumbers);
  md.use(parseHtmlBlockPlugin);
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  addLineNumbersPlugin
});
//# sourceMappingURL=index.cjs.map